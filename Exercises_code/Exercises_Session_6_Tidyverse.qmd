---
title: "Exercises Session 6:  Tidyverse"
author:
  name: Guillem Ylla, PhD
  affiliations:
    id: JU
    name: Jagiellonian University
format: 
  html:
      embed-resources: true
      theme: lumen
      toc: true
      toc-color: red
      toc-location: left
      toc-depth: 6
      toc-expand: 6
      code-tools:
        source: true
        toggle: true
      code-fold: true
      code-summary: "Show the code"
      code-overflow: wrap
      page-layout: full
editor: visual
editor_options: 
  markdown: 
    wrap: 72
---

# dplyr

`dplyr` is a library belonging to **tidyverse** that helps with
manipulating tables. It provides functions for different types of data.
Check out the
[Cheatsheet](https://rstudio.github.io/cheatsheets/html/data-transformation.html?_gl=1*xzfsvh*_ga*MjIyNDIwNTM2LjE2ODQ0MTUzNjQ.*_ga_2C0WZ1JHG0*MTcxMjA4MDg4Ny43LjAuMTcxMjA4MDg4Ny4wLjAuMA..).

A noticeable element of this library is that it incorporates the
**pipe** `(%>%)` , which allows us to concatenate operations.

-   Add `%>%` with **Ctrl+Shift+M**.

**ATTENTION**, new pipes are `|>` .

# Main dplyr functions

## Manipulate tables

-   `pivot_longer()` and `pivot_wider()` from wide to long and
    vice-versa.

-   `join_by()` to join tables by common column.

## Manipulate rows

-   `filter()` chooses rows based on column values.
-   `arrange()` changes the order of the rows.
    -   `desc()` inside arrange if we want them in decreasing order (by
        default arrange increasingly).
-   `slice_head()` and `slice_tail()` to show only n number of top or
    bottom rows.

## Manipulate columns

-   `select()` changes whether or not a column is included.
-   `mutate()` changes the values of columns and creates new columns.
-   `rename()` rename columns.
-   `separate()` split column in 2 (mostly used with strings).

## Summarize data

-   `glimpse()` shows structure of the table (similar to `str()` ).
-   `group_by()` groups data ("invisibly"), and we can later apply
    operations to each group.
-   `summarize()` generates summary statistics (within each group id
    data is groupped).
    -   can be used wit

## Operations

-   `n()` counts observations.

```{r}
#| warning: false

library(tidyr)
library(dplyr)
library(readr)
```

## Read data

-   `read_csv()`, from **readr** package, is the Tidyverse version of
    base R `read.csv()`.

```{r}
#| warning: false

TPMs_wide<-read_csv("data/TPMs_table_100genes.csv")

head(TPMs_wide)

glimpse(TPMs_wide)

```

## Make it longer

-   with `pivot_longer()` indicating the columns we want to pivot, and
    the names of the new columns (one for the names and other for the
    values).

```{r}
TPMs_long_0<- TPMs_wide %>% 
  tidyr::pivot_longer(cols=matches("Control|Treated"), names_to = "Sample", values_to = "TPMs") 
  #pivot_longer(cols=Control_1:Treated_3) #Alternative cols= first column : last column

TPMs_long_0
```

### Separate()

-   Separate samples by "\_" to get 1 column with condition and other
    with sample name.

```{r}
TPMs_long_1<-TPMs_long_0 %>% 
  separate(Sample, sep="_", into=c("Condition", "ReplicateNumber"), remove=F)

TPMs_long_1
```

### Select() and Filter()

#### Exercise 1 {style="background-color: #fafaa0"}

-   Use `select()` to get the columns GeneID, Sample, Condition, and
    TPMs into a new object called TPMs_long_2.
-   In a new chunk, use `filter()` to get those rows with TPMs \> 100.

```{r}
## YOUR CODE HERE

```

#### Solution Exercise 1 {#sec-solution-exercise-1 style="background-color: #e7fccc"}

```{r}
#| code-fold: true
#| output: true

TPMs_long_2<-TPMs_long_1 %>% 
  dplyr::select("GeneID", "Sample", "Condition", "TPMs")

rmarkdown::paged_table(TPMs_long_2)
```

```{r}
#| code-fold: true
#| output: true

Out_table_e1<-TPMs_long_2 %>% 
  filter(TPMs>100) 

rmarkdown::paged_table(Out_table_e1)

```

### Filter()

-   First, get the expression (TPMs) of the gene in all samples:

    -   FBgn0000003

-   In a new chunk, get the TPMs of a set of genes:

    -   FBgn0000042, FBgn0000150, FBgn0000261,FBgn0000318

-   Use filter to get the expression (TPMs) of these genes in each
    sample.

#### Exercise 2 {style="background-color: #fafaa0"}

```{r}
## YOUR CODE HERE

```

#### Solution Exercise 2 {#sec-solution-exercise style="background-color: #e7fccc"}

```{r}
#| code-fold: true
#| output: true

TPMs_long_2 %>% 
  dplyr::filter(GeneID == "FBgn0000003")
```

```{r}
#| code-fold: true
#| output: true

Out_table_e2<-TPMs_long_2 %>% 
  dplyr::filter(GeneID %in% c("FBgn0000042", "FBgn0000150", "FBgn0000261","FBgn0000318"))

rmarkdown::paged_table(Out_table_e2)

```

### Group_by() and apply a function

-   Now, we want to get the **mean** expression in **Control** and in
    **Treated** of the following genes.

    -   FBgn0000008, FBgn0000055, FBgn0000117, FBgn0000137

#### Exercise 3 {style="background-color: #fafaa0"}

```{r}
## YOUR CODE HERE

```

#### Solution Exercise 3 {style="background-color: #e7fccc"}

```{r}
#| code-fold: true
#| output: true

TPMs_long_2  %>% 
  dplyr::filter(GeneID %in% c("FBgn0000008", "FBgn0000055", "FBgn0000117", "FBgn0000137")) %>% 
  group_by(GeneID, Condition) %>% 
  summarise(MeanTPM = mean(TPMs)) # i can assign column name (MeanTPM) at the same time I calculate it


```

## Join() (left_join, right_join, full_join)

We can use `join()` functions to join to table with a common column.

-   A left_join() keeps all observations in x.
-   A right_join() keeps all observations in y.
-   A full_join() keeps all observations in x and y.

For example, we want to add the gene symbols and gene names to the TPMs
table using another table that contains the names and symbols of Dmel
genes.

```{r}
#| eval: false
#| include: false


## code that generated the Table_Symbl_Gene.csv
## this code is not going to run, because eval: false

library(org.Dm.eg.db)
library(AnnotationDbi)
Table_Symbl_Gene<-AnnotationDbi::select(org.Dm.eg.db, keys=TPMs_wide$GeneID, columns=c("SYMBOL","GENENAME"), keytype="FLYBASE")


write_csv(Table_Symbl_Gene, file = "data/Table_Symbl_Gene.csv")
```

Here, we load the table that contains the Flybase ID, gene Symbol, and
Gene name:

```{r}
#| warning: false

Table_SymbolsGenes<-read_csv("data/Table_Symbl_Gene.csv")
head(Table_SymbolsGenes)
```

#### Exercise 4 {style="background-color: #fafaa0"}

1.  Use `full_join()` to add the symbol and gene name to the long TPM
    table

```{r}
## YOUR CODE HERE

```

#### Solution Exercise 4 {style="background-color: #e7fccc"}

```{r}
#| code-fold: true
#| output: true

TPMs_long_2_gename<-TPMs_long_2 %>% 
   dplyr::full_join(y=Table_SymbolsGenes, by =c("GeneID"="FLYBASE" ))

head(TPMs_long_2_gename)
```

#### Exercise 5 {style="background-color: #fafaa0"}

We want to get the Symbols and Gene names of the top 10 expressed genes
across samples.

-   Start with **TPMs_long_2**.

-   Identify the genes with highest expression across samples (highest
    sum of TPMs).

-   Add the annotation from **Table_SymbolsGenes**.

-   Do it using dplyr functions concatenated with `%>%`.

```{r}
## YOUR CODE HERE

```

#### Solution Exercise {style="background-color: #e7fccc"}

```{r}
#| code-fold: true
#| output: true

TPMs_long_2 %>% 
  dplyr::group_by(GeneID) %>% # I group by gene
  dplyr::summarise(SumTPMs=sum(TPMs)) %>% # and for each group  (gene) I sum all TPMs
  dplyr::arrange(desc(SumTPMs)) %>%   # arrange them with decreasing expression
  dplyr::slice_head(n=10) %>% 
  dplyr::left_join(y=Table_SymbolsGenes, by =c("GeneID"="FLYBASE" )) %>% 
  dplyr::select(SYMBOL, GENENAME)
```
